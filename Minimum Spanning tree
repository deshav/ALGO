#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
#define graph_edge pair<int,int>


class Graph{
private:
    int v;
    vector<pair<int,graph_edge>> G;
    vector<pair<int,graph_edge>> T;
    int *parent;
    public:
        Graph(int v);
        void addEdge(int u,int v,int wt);
        int find_set(int i);
        void union_set(int u,int v);
        void Kruskal_algorithm();
        void display_mst();


};
Graph :: Graph(int v)
{
    parent= new int [v];
    for(int i=0;i<v;i++)
        parent[i]=i;
    G.clear();
    T.clear();
}
void Graph::addEdge(int u,int v,int wt)
{
    G.push_back(make_pair(wt,graph_edge(u,v)));
}
int Graph :: find_set(int i){
    if(i==parent[i])
        return i;
    else
        return find_set(parent[i]);
}
void Graph:: union_set(int u,int v)
{
    parent[u] =parent[v];
}
void Graph ::Kruskal_algorithm()
{
    int i,uSt,vEd;
    sort(G.begin(),G.end());
    for(i=0;i<G.size();i++)
    {
        uSt=find_set(G[i].second.first);
        vEd=find_set(G[i].second.second);
        if(uSt !=vEd){
            T.push_back(G[i]);
            union_set(uSt,vEd);
        }
    }
}
void Graph::display_mst()
{
    cout<<"Edge :"<<"Weight"<<
    endl;
    for(int i=0;i<T.size();i++)
    {
        cout<<T[i].second.first<<"-"<<T[i].second.second<<":"<<T[i].first;
        cout<<endl;
    }

}
int main()
{
    Graph gmst(5);
    gmst.addEdge(0,1,3);
    gmst.addEdge(0,3,3);
    gmst.addEdge(2,3,2);
    gmst.addEdge(2,4,1);
    gmst.addEdge(1,4,4);
    gmst.Kruskal_algorithm();
    cout<<"The Minimum Spanning Tree according to Kruskal algorithm:"<<endl;
    gmst.display_mst();
    return 0;
}
